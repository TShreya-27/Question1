const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });

const db = require('./db');
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

// Choose AI Provider from .env (OPENAI, OPENROUTER, COHERE)
const PROVIDER = process.env.AI_PROVIDER || 'OPENAI';

// Provider Setup
let aiClient = null;

if (PROVIDER === 'OPENAI') {
    const OpenAI = require('openai');
    aiClient = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
} else if (PROVIDER === 'OPENROUTER') {
    const OpenAI = require('openai');
    aiClient = new OpenAI({
        apiKey: process.env.OPENROUTER_API_KEY,
        baseURL: 'https://openrouter.ai/api/v1'
    });
} else if (PROVIDER === 'COHERE') {
    const cohere = require('cohere-ai');
    cohere.init(process.env.COHERE_API_KEY);
    aiClient = cohere;
} else {
    throw new Error(`Unsupported AI provider: ${PROVIDER}`);
}

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Signup endpoint
app.post('/signup', (req, res) => {
    const { username, password, role } = req.body;
    db.run(
        'INSERT INTO users (username, password, role) VALUES (?, ?, ?)',
        [username, password, role],
        function (err) {
            if (err) return res.status(400).json({ error: 'User exists' });
            res.json({ success: true });
        }
    );
});

// Login endpoint
app.post('/login', (req, res) => {
    const { username, password, role } = req.body;
    db.get(
        'SELECT * FROM users WHERE username = ? AND password = ? AND role = ?',
        [username, password, role],
        (err, user) => {
            if (err || !user) return res.status(401).json({ error: 'Invalid credentials' });
            res.json({ success: true });
        }
    );
});

// Assign unique question
app.post('/assign', async (req, res) => {
    const { username, subject } = req.body;
    db.get('SELECT * FROM users WHERE username = ?', [username], async (err, user) => {
        if (err || !user) return res.status(404).json({ error: 'User not found' });

        db.get('SELECT * FROM assignments WHERE student = ?', [username], async (err, row) => {
            if (row) return res.json(row);

            let prompt = `Generate a unique lab question for a student in the subject ${subject}. It should be moderately difficult.`;

            try {
                let question = '';

                if (PROVIDER === 'OPENAI' || PROVIDER === 'OPENROUTER') {
                    const aiRes = await aiClient.chat.completions.create({
                        model: 'gpt-3.5-turbo',
                        messages: [{ role: 'user', content: prompt }],
                        max_tokens: 100
                    });
                    question = aiRes.choices[0].message.content;
                } else if (PROVIDER === 'COHERE') {
                    const aiRes = await aiClient.generate({
                        model: 'command-xlarge',
                        prompt,
                        max_tokens: 100
                    });
                    question = aiRes.body.generations[0].text;
                }

                const assignedDate = new Date().toISOString();
                const timeLimit = 60;

                db.run(
                    'INSERT INTO assignments (student, question, status, assigned_date, time_limit, subject) VALUES (?, ?, ?, ?, ?, ?)',
                    [username, question, 'not attempted', assignedDate, timeLimit, subject],
                    function (err) {
                        if (err) return res.status(500).json({ error: 'Assignment failed' });
                        res.json({ student: username, question, status: 'not attempted', assigned_date: assignedDate, time_limit: timeLimit, subject });
                    }
                );
            } catch (e) {
                res.status(500).json({ error: 'AI generation error', details: e.message });
            }
        });
    });
});

// Faculty view all assignments
app.get('/assignments', (req, res) => {
    db.all('SELECT * FROM assignments', [], (err, rows) => {
        if (err) return res.status(500).json({ error: 'DB error' });
        res.json(rows);
    });
});

// Update assignment status
app.post('/assignment/status', (req, res) => {
    const { username, status } = req.body;
    db.run('UPDATE assignments SET status = ? WHERE student = ?', [status, username], function (err) {
        if (err) return res.status(500).json({ error: 'Update failed' });
        res.json({ success: true });
    });
});

app.listen(3001, () => console.log(`Server running with ${PROVIDER} on port 3001`));
